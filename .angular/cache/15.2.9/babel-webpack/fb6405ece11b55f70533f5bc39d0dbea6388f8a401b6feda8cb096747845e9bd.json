{"ast":null,"code":"import { AuthService } from './auth.service';\nimport * as i0 from \"@angular/core\";\nexport class TokenInterceptorService {\n  constructor(injector) {\n    this.injector = injector;\n  }\n  intercept(req, next) {\n    let authService = this.injector.get(AuthService);\n    let tokenizedReq = req.clone({\n      headers: req.headers.set('Authorization', 'bearer ' + authService.getToken())\n    });\n    return next.handle(tokenizedReq);\n  }\n}\nTokenInterceptorService.ɵfac = function TokenInterceptorService_Factory(t) {\n  return new (t || TokenInterceptorService)(i0.ɵɵinject(i0.Injector));\n};\nTokenInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TokenInterceptorService,\n  factory: TokenInterceptorService.ɵfac\n});","map":{"version":3,"mappings":"AAEA,SAASA,WAAW,QAAQ,gBAAgB;;AAE5C,OAAM,MAAOC,uBAAuB;EAElCC,YAAoBC,QAAkB;IAAlB,aAAQ,GAARA,QAAQ;EAAY;EACxCC,SAAS,CAACC,GAAG,EAAEC,IAAI;IACjB,IAAIC,WAAW,GAAG,IAAI,CAACJ,QAAQ,CAACK,GAAG,CAACR,WAAW,CAAC;IAChD,IAAIS,YAAY,GAAGJ,GAAG,CAACK,KAAK,CAC1B;MACEC,OAAO,EAAEN,GAAG,CAACM,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,SAAS,GAAGL,WAAW,CAACM,QAAQ,EAAE;KAC7E,CACF;IACD,OAAOP,IAAI,CAACQ,MAAM,CAACL,YAAY,CAAC;EAClC;;AAXWR,uBAAuB;mBAAvBA,uBAAuB;AAAA;AAAvBA,uBAAuB;SAAvBA,uBAAuB;EAAAc,SAAvBd,uBAAuB;AAAA","names":["AuthService","TokenInterceptorService","constructor","injector","intercept","req","next","authService","get","tokenizedReq","clone","headers","set","getToken","handle","factory"],"sourceRoot":"","sources":["D:\\Angular\\Event_hub\\src\\app\\token-interceptor.service.ts"],"sourcesContent":["import { Injectable, Injector } from '@angular/core';\nimport { HttpInterceptor } from '@angular/common/http'\nimport { AuthService } from './auth.service';\n@Injectable()\nexport class TokenInterceptorService implements HttpInterceptor {\n\n  constructor(private injector: Injector){}\n  intercept(req, next) {\n    let authService = this.injector.get(AuthService)\n    let tokenizedReq = req.clone(\n      {\n        headers: req.headers.set('Authorization', 'bearer ' + authService.getToken())\n      }\n    )\n    return next.handle(tokenizedReq)\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}